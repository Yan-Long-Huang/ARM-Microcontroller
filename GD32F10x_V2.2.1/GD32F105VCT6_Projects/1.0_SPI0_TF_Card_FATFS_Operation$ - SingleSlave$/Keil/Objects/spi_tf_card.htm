<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\spi_tf_card.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\spi_tf_card.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Jan 18 12:04:07 2022
<BR><P>
<H3>Maximum Stack Usage =       1768 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_multiblocks_write &rArr; sd_cmd_send &rArr; spi_write
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC0_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC0_1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC0_1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from gd32f10x_it.o(i.BusFault_Handler) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[20]">CAN0_EWMC_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[1e]">CAN0_RX0_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[1f]">CAN0_RX1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[1d]">CAN0_TX_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[4a]">CAN1_EWMC_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[48]">CAN1_RX0_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[49]">CAN1_RX1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[47]">CAN1_TX_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[15]">DMA0_Channel0_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[16]">DMA0_Channel1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[17]">DMA0_Channel2_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[18]">DMA0_Channel3_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[19]">DMA0_Channel4_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[1a]">DMA0_Channel5_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[1b]">DMA0_Channel6_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[40]">DMA1_Channel0_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[41]">DMA1_Channel1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[42]">DMA1_Channel2_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[43]">DMA1_Channel3_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[44]">DMA1_Channel4_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from gd32f10x_it.o(i.DebugMon_Handler) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[45]">ENET_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[46]">ENET_WKUP_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[39]">EXMC_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[32]">EXTI10_15_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[21]">EXTI5_9_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[e]">FMC_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from gd32f10x_it.o(i.HardFault_Handler) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[2a]">I2C0_ER_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[29]">I2C0_EV_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[2c]">I2C1_ER_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[2b]">I2C1_EV_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[b]">LVD_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from gd32f10x_it.o(i.MemManage_Handler) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from gd32f10x_it.o(i.NMI_Handler) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from gd32f10x_it.o(i.PendSV_Handler) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[f]">RCU_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[2d]">SPI0_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[3b]">SPI2_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from gd32f10x_it.o(i.SVC_Handler) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from gd32f10x_it.o(i.SysTick_Handler) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[4d]">SystemInit</a> from system_gd32f10x.o(i.SystemInit) referenced from startup_gd32f10x_cl.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[22]">TIMER0_BRK_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[25]">TIMER0_Channel_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[24]">TIMER0_TRG_CMT_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[23]">TIMER0_UP_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[26]">TIMER1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[27]">TIMER2_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[28]">TIMER3_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[3a]">TIMER4_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[3e]">TIMER5_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[3f]">TIMER6_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[35]">TIMER7_BRK_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[38]">TIMER7_Channel_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[37]">TIMER7_TRG_CMT_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[36]">TIMER7_UP_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[3c]">UART3_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[3d]">UART4_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[2f]">USART0_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[30]">USART1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[4b]">USBFS_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[34]">USBFS_WKUP_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from gd32f10x_it.o(i.UsageFault_Handler) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[a]">WWDGT_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[4e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32f10x_cl.o(.text)
 <LI><a href="#[4f]">fputc</a> from main.o(i.fputc) referenced from printfb.o(i.__0printf$bare)
 <LI><a href="#[4c]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(.text)
</UL>
<P><STRONG><a name="[ce]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[50]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[55]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[cf]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[d0]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[d1]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[d2]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[d3]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[d4]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN0_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN1_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>ENET_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIMER0_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIMER0_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIMER0_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIMER7_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIMER7_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIMER7_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>USBFS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBFS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[d5]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[d6]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[d7]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>LED_OFF</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, main.o(i.LED_OFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_OFF
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash
</UL>

<P><STRONG><a name="[58]"></a>LED_ON</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, main.o(i.LED_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_ON
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gd32f10x_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_decrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SystemInit</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, system_gd32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>__0printf$bare</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d8]"></a>__1printf$bare</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare), UNUSED)

<P><STRONG><a name="[9d]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfb.o(i.__0printf$bare))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_init
</UL>

<P><STRONG><a name="[d9]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[da]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[db]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[66]"></a>com_port_init</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, main.o(i.com_port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = com_port_init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_rts_config
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_cts_config
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>delay_1ms</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, systick.o(i.delay_1ms))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash
</UL>

<P><STRONG><a name="[5a]"></a>delay_decrement</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, systick.o(i.delay_decrement))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[94]"></a>disk_initialize</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = disk_initialize &rArr; sd_card_init &rArr; spi_config &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[c6]"></a>disk_ioctl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[96]"></a>disk_read</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = disk_read &rArr; sd_multiblocks_read &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_read
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[b0]"></a>disk_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[86]"></a>disk_write</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = disk_write &rArr; sd_multiblocks_write &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_write
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[9c]"></a>display_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.display_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = display_init
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>f_close</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536<LI>Call Chain = f_close &rArr; f_sync &rArr; load_obj_xdir &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_multiblocks_write &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>f_mount</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_multiblocks_write &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>f_open</STRONG> (Thumb, 852 bytes, Stack size 1264 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_multiblocks_write &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_alloc_info
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>f_read</STRONG> (Thumb, 528 bytes, Stack size 80 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_multiblocks_write &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>f_sync</STRONG> (Thumb, 440 bytes, Stack size 1232 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = f_sync &rArr; load_obj_xdir &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_multiblocks_write &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_qword
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_obj_xdir
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_last_frag
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_first_frag
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[af]"></a>f_write</STRONG> (Thumb, 622 bytes, Stack size 80 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = f_write &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_multiblocks_write &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>ff_oem2uni</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, ffunicode.o(i.ff_oem2uni))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ff_oem2uni
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
</UL>

<P><STRONG><a name="[7c]"></a>ff_uni2oem</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ffunicode.o(i.ff_uni2oem))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ff_uni2oem
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[65]"></a>ff_wtoupper</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, ffunicode.o(i.ff_wtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xname_sum
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[4f]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfb.o(i.__0printf$bare)
</UL>
<P><STRONG><a name="[a7]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fattime.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[57]"></a>gpio_bit_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f10x_gpio.o(i.gpio_bit_reset))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_OFF
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_write
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_read
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
</UL>

<P><STRONG><a name="[59]"></a>gpio_bit_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f10x_gpio.o(i.gpio_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ON
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_write
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_read
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
</UL>

<P><STRONG><a name="[68]"></a>gpio_init</STRONG> (Thumb, 172 bytes, Stack size 20 bytes, gd32f10x_gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_port_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
</UL>

<P><STRONG><a name="[b5]"></a>led_flash</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, main.o(i.led_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = led_flash &rArr; LED_ON
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ON
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>led_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = led_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>main</STRONG> (Thumb, 236 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768<LI>Call Chain = main &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_multiblocks_write &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_config
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_compare
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_flash
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_port_init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[bb]"></a>memory_compare</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, main.o(i.memory_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memory_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>nvic_vector_table_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f10x_misc.o(i.nvic_vector_table_set))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[cb]"></a>rcu_clock_freq_get</STRONG> (Thumb, 334 bytes, Stack size 92 bytes, gd32f10x_rcu.o(i.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>

<P><STRONG><a name="[b9]"></a>rcu_config</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(i.rcu_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcu_config
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f10x_rcu.o(i.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_config
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_port_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
</UL>

<P><STRONG><a name="[cd]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f10x_rcu.o(i.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[cc]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f10x_rcu.o(i.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[99]"></a>sd_block_read</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, spi_sd.o(i.sd_block_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sd_block_read &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_response_get
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[9b]"></a>sd_block_write</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, spi_sd.o(i.sd_block_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sd_block_write &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_data_response_get
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[95]"></a>sd_card_init</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, spi_sd.o(i.sd_card_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = sd_card_init &rArr; spi_config &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_cmd_send
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[bc]"></a>sd_cmd_send</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, spi_sd.o(i.sd_cmd_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_write
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_read
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
</UL>

<P><STRONG><a name="[bf]"></a>sd_data_response_get</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, spi_sd.o(i.sd_data_response_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sd_data_response_get &rArr; spi_read
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_write
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
</UL>

<P><STRONG><a name="[97]"></a>sd_multiblocks_read</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, spi_sd.o(i.sd_multiblocks_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sd_multiblocks_read &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_response_get
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[9a]"></a>sd_multiblocks_write</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, spi_sd.o(i.sd_multiblocks_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sd_multiblocks_write &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_data_response_get
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[bd]"></a>sd_response_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, spi_sd.o(i.sd_response_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sd_response_get &rArr; spi_read
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_read
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
</UL>

<P><STRONG><a name="[c2]"></a>spi_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_spi.o(i.spi_enable))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
</UL>

<P><STRONG><a name="[c5]"></a>spi_i2s_data_receive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f10x_spi.o(i.spi_i2s_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
</UL>

<P><STRONG><a name="[c4]"></a>spi_i2s_data_transmit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f10x_spi.o(i.spi_i2s_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
</UL>

<P><STRONG><a name="[c3]"></a>spi_i2s_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_spi.o(i.spi_i2s_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
</UL>

<P><STRONG><a name="[c1]"></a>spi_init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gd32f10x_spi.o(i.spi_init))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
</UL>

<P><STRONG><a name="[be]"></a>spi_read</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, spi_sd.o(i.spi_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_read
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_response_get
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_data_response_get
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
</UL>

<P><STRONG><a name="[98]"></a>spi_write</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, spi_sd.o(i.spi_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_write
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_multiblocks_read
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_cmd_send
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_write
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_block_read
</UL>

<P><STRONG><a name="[ba]"></a>systick_config</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, systick.o(i.systick_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = systick_config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>usart_baudrate_set</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, gd32f10x_usart.o(i.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_port_init
</UL>

<P><STRONG><a name="[b2]"></a>usart_data_transmit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[69]"></a>usart_deinit</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, gd32f10x_usart.o(i.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_port_init
</UL>

<P><STRONG><a name="[72]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_port_init
</UL>

<P><STRONG><a name="[b3]"></a>usart_flag_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32f10x_usart.o(i.usart_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[6f]"></a>usart_hardware_flow_cts_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_hardware_flow_cts_config))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_port_init
</UL>

<P><STRONG><a name="[6e]"></a>usart_hardware_flow_rts_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_hardware_flow_rts_config))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_port_init
</UL>

<P><STRONG><a name="[6d]"></a>usart_parity_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_parity_config))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_port_init
</UL>

<P><STRONG><a name="[70]"></a>usart_receive_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_port_init
</UL>

<P><STRONG><a name="[6c]"></a>usart_stop_bit_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_stop_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_port_init
</UL>

<P><STRONG><a name="[71]"></a>usart_transmit_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_port_init
</UL>

<P><STRONG><a name="[6b]"></a>usart_word_length_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_word_length_set))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_port_init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c8]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, systick.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
</UL>

<P><STRONG><a name="[c7]"></a>system_clock_96m_hxtal</STRONG> (Thumb, 212 bytes, Stack size 0 bytes, system_gd32f10x.o(i.system_clock_96m_hxtal))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[5b]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32f10x.o(i.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_96m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c0]"></a>spi_config</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, spi_sd.o(i.spi_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = spi_config &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_card_init
</UL>

<P><STRONG><a name="[5f]"></a>change_bitmap</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ff.o(i.change_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = change_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_multiblocks_write &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[61]"></a>check_fs</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_multiblocks_write &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[7a]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[85]"></a>clst2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clst2sect))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[64]"></a>cmp_lfn</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cmp_lfn &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[73]"></a>create_chain</STRONG> (Thumb, 460 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_multiblocks_write &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_bitmap
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_last_frag
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[78]"></a>create_name</STRONG> (Thumb, 576 bytes, Stack size 64 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = create_name &rArr; tchar2uni &rArr; ff_oem2uni
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_uni2oem
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[7d]"></a>create_xdir</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, ff.o(i.create_xdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = create_xdir &rArr; xname_sum &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xname_sum
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[b4]"></a>dbc_1st</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ff.o(i.dbc_1st))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
</UL>

<P><STRONG><a name="[c9]"></a>dbc_2nd</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, ff.o(i.dbc_2nd))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
</UL>

<P><STRONG><a name="[80]"></a>dir_alloc</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_multiblocks_write &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[83]"></a>dir_clear</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ff.o(i.dir_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = dir_clear &rArr; sync_window &rArr; disk_write &rArr; sd_multiblocks_write &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[87]"></a>dir_find</STRONG> (Thumb, 424 bytes, Stack size 56 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_multiblocks_write &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xname_sum
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[82]"></a>dir_next</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_multiblocks_write &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[88]"></a>dir_read</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_multiblocks_write &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[8c]"></a>dir_register</STRONG> (Thumb, 548 bytes, Stack size 136 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_multiblocks_write &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_qword
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_obj_xdir
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_last_frag
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_first_frag
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_xdir
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[81]"></a>dir_sdi</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_multiblocks_write &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_obj_xdir
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[8d]"></a>fill_first_frag</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ff.o(i.fill_first_frag))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fill_first_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_multiblocks_write &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[76]"></a>fill_last_frag</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ff.o(i.fill_last_frag))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_multiblocks_write &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[75]"></a>find_bitmap</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, ff.o(i.find_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = find_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_multiblocks_write &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[a3]"></a>find_volume</STRONG> (Thumb, 1214 bytes, Stack size 112 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_multiblocks_write &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_qword
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[a5]"></a>follow_path</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_multiblocks_write &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_alloc_info
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[92]"></a>gen_numname</STRONG> (Thumb, 198 bytes, Stack size 64 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = gen_numname &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[74]"></a>get_fat</STRONG> (Thumb, 400 bytes, Stack size 48 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_multiblocks_write &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[a2]"></a>get_ldnumber</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[a6]"></a>init_alloc_info</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(i.init_alloc_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = init_alloc_info &rArr; ld_qword
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_qword
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[aa]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[ac]"></a>ld_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_alloc_info
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[b1]"></a>ld_qword</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ff.o(i.ld_qword))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_qword
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_alloc_info
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[62]"></a>ld_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[8e]"></a>load_obj_xdir</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ff.o(i.load_obj_xdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = load_obj_xdir &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_multiblocks_write &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[8a]"></a>load_xdir</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, ff.o(i.load_xdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_multiblocks_write &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdir_sum
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_obj_xdir
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[63]"></a>mem_cmp</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[91]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[7b]"></a>mem_set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_xdir
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[60]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; sd_multiblocks_write &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_bitmap
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_bitmap
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[8b]"></a>pick_lfn</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, ff.o(i.pick_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pick_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[77]"></a>put_fat</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_multiblocks_write &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_last_frag
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_first_frag
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[93]"></a>put_lfn</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ff.o(i.put_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = put_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[a9]"></a>remove_chain</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = remove_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_multiblocks_write &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[ab]"></a>st_clust</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ff.o(i.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[a8]"></a>st_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[8f]"></a>st_qword</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, ff.o(i.st_qword))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = st_qword
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[7e]"></a>st_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_xdir
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[90]"></a>store_xdir</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ff.o(i.store_xdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = store_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; sd_multiblocks_write &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdir_sum
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[89]"></a>sum_sfn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(i.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[ae]"></a>sync_fs</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; sd_multiblocks_write &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[84]"></a>sync_window</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sync_window &rArr; disk_write &rArr; sd_multiblocks_write &rArr; sd_cmd_send &rArr; spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[79]"></a>tchar2uni</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ff.o(i.tchar2uni))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tchar2uni &rArr; ff_oem2uni
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_2nd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_oem2uni
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[a0]"></a>validate</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[b8]"></a>xdir_sum</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, ff.o(i.xdir_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = xdir_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
</UL>

<P><STRONG><a name="[7f]"></a>xname_sum</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ff.o(i.xname_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xname_sum &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_xdir
</UL>

<P><STRONG><a name="[5e]"></a>_printf_core</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfb.o(i._printf_core), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$bare
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
