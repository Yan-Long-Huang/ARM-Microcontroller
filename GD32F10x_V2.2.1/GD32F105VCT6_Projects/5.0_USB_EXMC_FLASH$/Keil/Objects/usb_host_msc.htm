<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\usb_host_msc.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\usb_host_msc.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Mon Dec 06 14:02:02 2021
<BR><P>
<H3>Maximum Stack Usage =       1012 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
usbh_usr_msc_application &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; usbh_msc_write &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC0_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC0_1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC0_1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from gd32f10x_it.o(i.BusFault_Handler) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[20]">CAN0_EWMC_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[1e]">CAN0_RX0_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[1f]">CAN0_RX1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[1d]">CAN0_TX_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[4a]">CAN1_EWMC_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[48]">CAN1_RX0_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[49]">CAN1_RX1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[47]">CAN1_TX_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[15]">DMA0_Channel0_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[16]">DMA0_Channel1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[17]">DMA0_Channel2_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[18]">DMA0_Channel3_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[19]">DMA0_Channel4_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[1a]">DMA0_Channel5_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[1b]">DMA0_Channel6_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[40]">DMA1_Channel0_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[41]">DMA1_Channel1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[42]">DMA1_Channel2_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[43]">DMA1_Channel3_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[44]">DMA1_Channel4_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from gd32f10x_it.o(i.DebugMon_Handler) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[45]">ENET_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[46]">ENET_WKUP_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[39]">EXMC_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[32]">EXTI10_15_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[21]">EXTI5_9_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[e]">FMC_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from gd32f10x_it.o(i.HardFault_Handler) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[2a]">I2C0_ER_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[29]">I2C0_EV_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[2c]">I2C1_ER_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[2b]">I2C1_EV_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[b]">LVD_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from gd32f10x_it.o(i.MemManage_Handler) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from gd32f10x_it.o(i.NMI_Handler) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from gd32f10x_it.o(i.PendSV_Handler) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[f]">RCU_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[2d]">SPI0_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[3b]">SPI2_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from gd32f10x_it.o(i.SVC_Handler) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from gd32f10x_it.o(i.SysTick_Handler) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[4d]">SystemInit</a> from system_gd32f10x.o(i.SystemInit) referenced from startup_gd32f10x_cl.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[22]">TIMER0_BRK_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[25]">TIMER0_Channel_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[24]">TIMER0_TRG_CMT_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[23]">TIMER0_UP_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[26]">TIMER1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[27]">TIMER2_IRQHandler</a> from gd32f10x_it.o(i.TIMER2_IRQHandler) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[28]">TIMER3_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[3a]">TIMER4_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[3e]">TIMER5_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[3f]">TIMER6_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[35]">TIMER7_BRK_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[38]">TIMER7_Channel_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[37]">TIMER7_TRG_CMT_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[36]">TIMER7_UP_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[3c]">UART3_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[3d]">UART4_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[2f]">USART0_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[30]">USART1_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[4b]">USBFS_IRQHandler</a> from gd32f10x_it.o(i.USBFS_IRQHandler) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[34]">USBFS_WKUP_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from gd32f10x_it.o(i.UsageFault_Handler) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[a]">WWDGT_IRQHandler</a> from startup_gd32f10x_cl.o(.text) referenced from startup_gd32f10x_cl.o(RESET)
 <LI><a href="#[4e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32f10x_cl.o(.text)
 <LI><a href="#[4f]">fputc</a> from usbh_usr.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[4c]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[62]">usbh_connect</a> from usbh_core.o(i.usbh_connect) referenced from usbh_core.o(.data)
 <LI><a href="#[63]">usbh_disconnect</a> from usbh_core.o(i.usbh_disconnect) referenced from usbh_core.o(.data)
 <LI><a href="#[6a]">usbh_msc_handle</a> from usbh_msc_core.o(i.usbh_msc_handle) referenced from usbh_msc_core.o(.data)
 <LI><a href="#[68]">usbh_msc_itf_deinit</a> from usbh_msc_core.o(i.usbh_msc_itf_deinit) referenced from usbh_msc_core.o(.data)
 <LI><a href="#[67]">usbh_msc_itf_init</a> from usbh_msc_core.o(i.usbh_msc_itf_init) referenced from usbh_msc_core.o(.data)
 <LI><a href="#[69]">usbh_msc_req</a> from usbh_msc_core.o(i.usbh_msc_req) referenced from usbh_msc_core.o(.data)
 <LI><a href="#[65]">usbh_port_disabled</a> from usbh_core.o(i.usbh_port_disabled) referenced from usbh_core.o(.data)
 <LI><a href="#[64]">usbh_port_enabled</a> from usbh_core.o(i.usbh_port_enabled) referenced from usbh_core.o(.data)
 <LI><a href="#[66]">usbh_sof</a> from usbh_core.o(i.usbh_sof) referenced from usbh_core.o(.data)
 <LI><a href="#[59]">usbh_user_configuration_descavailable</a> from usbh_usr.o(i.usbh_user_configuration_descavailable) referenced from usbh_usr.o(.data)
 <LI><a href="#[51]">usbh_user_deinit</a> from usbh_usr.o(i.usbh_user_deinit) referenced from usbh_usr.o(.data)
 <LI><a href="#[58]">usbh_user_device_address_assigned</a> from usbh_usr.o(i.usbh_user_device_address_assigned) referenced from usbh_usr.o(.data)
 <LI><a href="#[52]">usbh_user_device_connected</a> from usbh_usr.o(i.usbh_user_device_connected) referenced from usbh_usr.o(.data)
 <LI><a href="#[57]">usbh_user_device_desc_available</a> from usbh_usr.o(i.usbh_user_device_desc_available) referenced from usbh_usr.o(.data)
 <LI><a href="#[54]">usbh_user_device_disconnected</a> from usbh_usr.o(i.usbh_user_device_disconnected) referenced from usbh_usr.o(.data)
 <LI><a href="#[60]">usbh_user_device_not_supported</a> from usbh_usr.o(i.usbh_user_device_not_supported) referenced from usbh_usr.o(.data)
 <LI><a href="#[53]">usbh_user_device_reset</a> from usbh_usr.o(i.usbh_user_device_reset) referenced from usbh_usr.o(.data)
 <LI><a href="#[56]">usbh_user_device_speed_detected</a> from usbh_usr.o(i.usbh_user_device_speed_detected) referenced from usbh_usr.o(.data)
 <LI><a href="#[5d]">usbh_user_enumeration_finish</a> from usbh_usr.o(i.usbh_user_enumeration_finish) referenced from usbh_usr.o(.data)
 <LI><a href="#[50]">usbh_user_init</a> from usbh_usr.o(i.usbh_user_init) referenced from usbh_usr.o(.data)
 <LI><a href="#[5a]">usbh_user_manufacturer_string</a> from usbh_usr.o(i.usbh_user_manufacturer_string) referenced from usbh_usr.o(.data)
 <LI><a href="#[55]">usbh_user_over_current_detected</a> from usbh_usr.o(i.usbh_user_over_current_detected) referenced from usbh_usr.o(.data)
 <LI><a href="#[5b]">usbh_user_product_string</a> from usbh_usr.o(i.usbh_user_product_string) referenced from usbh_usr.o(.data)
 <LI><a href="#[5c]">usbh_user_serialnum_string</a> from usbh_usr.o(i.usbh_user_serialnum_string) referenced from usbh_usr.o(.data)
 <LI><a href="#[61]">usbh_user_unrecovered_error</a> from usbh_usr.o(i.usbh_user_unrecovered_error) referenced from usbh_usr.o(.data)
 <LI><a href="#[5e]">usbh_user_userinput</a> from usbh_usr.o(i.usbh_user_userinput) referenced from usbh_usr.o(.data)
 <LI><a href="#[5f]">usbh_usr_msc_application</a> from usbh_usr.o(i.usbh_usr_msc_application) referenced from usbh_usr.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(.text)
</UL>
<P><STRONG><a name="[153]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[6b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[73]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[154]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[155]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[156]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[157]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[158]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[159]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN0_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN1_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>ENET_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIMER0_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIMER0_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIMER0_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIMER7_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIMER7_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIMER7_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBFS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>

<P><STRONG><a name="[12d]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_scsi_inquiry
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_devdesc_parse
</UL>

<P><STRONG><a name="[fb]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_lun_info_get
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_pipe_delete
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_basic_init
</UL>

<P><STRONG><a name="[15a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[15b]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_write10
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_test_unitready
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_scsi_inquiry
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_request_sense
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_read_capacity10
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_read10
</UL>

<P><STRONG><a name="[fa]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_itf_init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_devdesc_parse
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_pipe_delete
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_basic_init
</UL>

<P><STRONG><a name="[15d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[15e]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[15f]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[160]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>LED_ON</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, usbh_usr.o(i.LED_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_ON
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_usr_msc_application
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f10x_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_gd32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(.text)
</UL>
<P><STRONG><a name="[27]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gd32f10x_it.o(i.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER2_IRQHandler &rArr; usb_timer_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_timer_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>USBFS_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gd32f10x_it.o(i.USBFS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBFS_IRQHandler &rArr; usbh_isr &rArr; usbh_int_port &rArr; usb_port_reset &rArr; usb_mdelay &rArr; hwp_delay &rArr; hwp_time_set
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[161]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[151]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_usr_msc_application
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_user_unrecovered_error
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_user_serialnum_string
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_user_product_string
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_user_over_current_detected
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_user_manufacturer_string
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_user_init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_user_enumeration_finish
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_user_device_speed_detected
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_user_device_reset
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_user_device_not_supported
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_user_device_disconnected
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_user_device_desc_available
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_user_device_connected
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_user_configuration_descavailable
</UL>

<P><STRONG><a name="[162]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[163]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[164]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[7d]"></a>button_init</STRONG> (Thumb, 392 bytes, Stack size 16 bytes, usbh_usr.o(i.button_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = button_init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_exti_source_select
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>button_state_get</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbh_usr.o(i.button_state_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = button_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_usr_msc_application
</UL>

<P><STRONG><a name="[8d]"></a>com_port_init</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, main.o(i.com_port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = com_port_init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_rts_config
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_cts_config
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d7]"></a>disk_initialize</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbh_msc_fatfs.o(i.disk_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[b9]"></a>disk_ioctl</STRONG> (Thumb, 116 bytes, Stack size 80 bytes, usbh_msc_fatfs.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = disk_ioctl &rArr; usbh_msc_lun_info_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_lun_info_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[bb]"></a>disk_read</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, usbh_msc_fatfs.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = disk_read &rArr; usbh_msc_read &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[d6]"></a>disk_status</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbh_msc_fatfs.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[ab]"></a>disk_write</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, usbh_msc_fatfs.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = disk_write &rArr; usbh_msc_write &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_write
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[c4]"></a>exmc_nand_enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32f10x_exmc.o(i.exmc_nand_enable))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_nandflash_init
</UL>

<P><STRONG><a name="[c3]"></a>exmc_nand_init</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, gd32f10x_exmc.o(i.exmc_nand_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = exmc_nand_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_nandflash_init
</UL>

<P><STRONG><a name="[c2]"></a>exmc_nandflash_init</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, exmc_nandflash.o(i.exmc_nandflash_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = exmc_nandflash_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_nand_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_nand_enable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>exti_init</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, gd32f10x_exti.o(i.exti_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = exti_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
</UL>

<P><STRONG><a name="[83]"></a>exti_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f10x_exti.o(i.exti_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
</UL>

<P><STRONG><a name="[c5]"></a>f_close</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = f_close &rArr; f_sync &rArr; load_obj_xdir &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; usbh_msc_write &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_usr_msc_application
</UL>

<P><STRONG><a name="[c8]"></a>f_mount</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; usbh_msc_write &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_usr_msc_application
</UL>

<P><STRONG><a name="[cb]"></a>f_open</STRONG> (Thumb, 730 bytes, Stack size 144 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 932<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; usbh_msc_write &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_alloc_info
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_usr_msc_application
</UL>

<P><STRONG><a name="[c6]"></a>f_sync</STRONG> (Thumb, 382 bytes, Stack size 112 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = f_sync &rArr; load_obj_xdir &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; usbh_msc_write &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_qword
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_obj_xdir
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_last_frag
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_first_frag
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[d5]"></a>f_write</STRONG> (Thumb, 618 bytes, Stack size 80 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = f_write &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; usbh_msc_write &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_usr_msc_application
</UL>

<P><STRONG><a name="[f4]"></a>ff_oem2uni</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, ffunicode.o(i.ff_oem2uni))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ff_oem2uni
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
</UL>

<P><STRONG><a name="[a1]"></a>ff_uni2oem</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ffunicode.o(i.ff_uni2oem))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ff_uni2oem
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[8c]"></a>ff_wtoupper</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, ffunicode.o(i.ff_wtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xname_sum
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[4f]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usbh_usr.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[ce]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_msc_fatfs.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[10e]"></a>gpio_bit_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f10x_gpio.o(i.gpio_bit_reset))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_vbus_drive
</UL>

<P><STRONG><a name="[75]"></a>gpio_bit_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f10x_gpio.o(i.gpio_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ON
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_vbus_drive
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_vbus_config
</UL>

<P><STRONG><a name="[e7]"></a>gpio_bit_write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_gpio.o(i.gpio_bit_write))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_toggle
</UL>

<P><STRONG><a name="[81]"></a>gpio_exti_source_select</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, gd32f10x_gpio.o(i.gpio_exti_source_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_exti_source_select
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
</UL>

<P><STRONG><a name="[7f]"></a>gpio_init</STRONG> (Thumb, 172 bytes, Stack size 20 bytes, gd32f10x_gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_nandflash_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_port_init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_vbus_config
</UL>

<P><STRONG><a name="[85]"></a>gpio_input_bit_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_gpio.o(i.gpio_input_bit_get))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_toggle
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_state_get
</UL>

<P><STRONG><a name="[e5]"></a>led_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbh_usr.o(i.led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = led_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>led_toggle</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, usbh_usr.o(i.led_toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = led_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toggle_leds
</UL>

<P><STRONG><a name="[4c]"></a>main</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = main &rArr; usbh_core_task &rArr; usbh_enum_task &rArr; usbh_strdesc_get &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_core_task
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_class_register
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_nandflash_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_port_init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_vbus_config
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_timer_init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rcu_config
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_intr_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[f0]"></a>nand_read</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, exmc_nandflash.o(i.nand_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nand_read &rArr; exmc_nand_readdata &rArr; exmc_nand_readpage &rArr; exmc_nand_getstatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_nand_readdata
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_usr_msc_application
</UL>

<P><STRONG><a name="[152]"></a>nand_read_id</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, exmc_nandflash.o(i.nand_read_id))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_usr_msc_application
</UL>

<P><STRONG><a name="[80]"></a>nvic_irq_enable</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, gd32f10x_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_timer_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_intr_config
</UL>

<P><STRONG><a name="[f1]"></a>nvic_priority_group_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_misc.o(i.nvic_priority_group_set))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_timer_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_intr_config
</UL>

<P><STRONG><a name="[10c]"></a>nvic_vector_table_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32f10x_misc.o(i.nvic_vector_table_set))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_timer_init
</UL>

<P><STRONG><a name="[f6]"></a>rcu_clock_freq_get</STRONG> (Thumb, 334 bytes, Stack size 92 bytes, gd32f10x_rcu.o(i.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rcu_config
</UL>

<P><STRONG><a name="[7e]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f10x_rcu.o(i.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_nandflash_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_port_init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_vbus_config
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_timer_init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rcu_config
</UL>

<P><STRONG><a name="[f8]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f10x_rcu.o(i.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[f7]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f10x_rcu.o(i.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[10b]"></a>rcu_usb_clock_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f10x_rcu.o(i.rcu_usb_clock_config))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rcu_config
</UL>

<P><STRONG><a name="[e2]"></a>timer_auto_reload_shadow_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_timer.o(i.timer_auto_reload_shadow_enable))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwp_time_set
</UL>

<P><STRONG><a name="[de]"></a>timer_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_timer.o(i.timer_disable))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwp_time_set
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwp_delay
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_timer_irq
</UL>

<P><STRONG><a name="[e4]"></a>timer_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_timer.o(i.timer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwp_time_set
</UL>

<P><STRONG><a name="[e0]"></a>timer_init</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, gd32f10x_timer.o(i.timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwp_time_set
</UL>

<P><STRONG><a name="[df]"></a>timer_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f10x_timer.o(i.timer_interrupt_disable))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwp_time_set
</UL>

<P><STRONG><a name="[e3]"></a>timer_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f10x_timer.o(i.timer_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwp_time_set
</UL>

<P><STRONG><a name="[e1]"></a>timer_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f10x_timer.o(i.timer_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwp_time_set
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_timer_irq
</UL>

<P><STRONG><a name="[10d]"></a>timer_interrupt_flag_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f10x_timer.o(i.timer_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_timer_irq
</UL>

<P><STRONG><a name="[8f]"></a>usart_baudrate_set</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, gd32f10x_usart.o(i.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_port_init
</UL>

<P><STRONG><a name="[d9]"></a>usart_data_transmit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[8e]"></a>usart_deinit</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, gd32f10x_usart.o(i.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_port_init
</UL>

<P><STRONG><a name="[97]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_port_init
</UL>

<P><STRONG><a name="[da]"></a>usart_flag_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32f10x_usart.o(i.usart_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[94]"></a>usart_hardware_flow_cts_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_hardware_flow_cts_config))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_port_init
</UL>

<P><STRONG><a name="[93]"></a>usart_hardware_flow_rts_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_hardware_flow_rts_config))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_port_init
</UL>

<P><STRONG><a name="[92]"></a>usart_parity_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_parity_config))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_port_init
</UL>

<P><STRONG><a name="[95]"></a>usart_receive_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_port_init
</UL>

<P><STRONG><a name="[91]"></a>usart_stop_bit_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_stop_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_port_init
</UL>

<P><STRONG><a name="[96]"></a>usart_transmit_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_port_init
</UL>

<P><STRONG><a name="[90]"></a>usart_word_length_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f10x_usart.o(i.usart_word_length_set))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_port_init
</UL>

<P><STRONG><a name="[f9]"></a>usb_basic_init</STRONG> (Thumb, 216 bytes, Stack size 208 bytes, drv_usb_core.o(i.usb_basic_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = usb_basic_init
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_init
</UL>

<P><STRONG><a name="[fc]"></a>usb_core_init</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, drv_usb_core.o(i.usb_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = usb_core_init &rArr; usb_core_reset &rArr; usb_udelay &rArr; hwp_delay &rArr; hwp_time_set
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_mdelay
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_core_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_init
</UL>

<P><STRONG><a name="[132]"></a>usb_curmode_set</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, drv_usb_core.o(i.usb_curmode_set))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_init
</UL>

<P><STRONG><a name="[100]"></a>usb_host_init</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, drv_usb_host.o(i.usb_host_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = usb_host_init &rArr; usb_portvbus_switch &rArr; usb_mdelay &rArr; hwp_delay &rArr; hwp_time_set
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_portvbus_switch
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_txfifo_flush
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rxfifo_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_init
</UL>

<P><STRONG><a name="[ee]"></a>usb_intr_config</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gd32f10x_usb_hw.o(i.usb_intr_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usb_intr_config &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fe]"></a>usb_mdelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gd32f10x_usb_hw.o(i.usb_mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usb_mdelay &rArr; hwp_delay &rArr; hwp_time_set
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwp_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_usr_msc_application
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_core_task
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_vbus_config
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_enum_task
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_portvbus_switch
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_port_reset
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_core_init
</UL>

<P><STRONG><a name="[10a]"></a>usb_pipe_halt</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, drv_usb_host.o(i.usb_pipe_halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usb_pipe_halt
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_itf_deinit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_int_pipe_in
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pp_halt
</UL>

<P><STRONG><a name="[14f]"></a>usb_pipe_init</STRONG> (Thumb, 336 bytes, Stack size 20 bytes, drv_usb_host.o(i.usb_pipe_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usb_pipe_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_pipe_update
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_pipe_create
</UL>

<P><STRONG><a name="[136]"></a>usb_pipe_ping</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, drv_usb_host.o(i.usb_pipe_ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_pipe_ping
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_int_pipe_out
</UL>

<P><STRONG><a name="[104]"></a>usb_pipe_xfer</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, drv_usb_host.o(i.usb_pipe_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_txfifo_write
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_request_submit
</UL>

<P><STRONG><a name="[106]"></a>usb_port_reset</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, drv_usb_host.o(i.usb_port_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usb_port_reset &rArr; usb_mdelay &rArr; hwp_delay &rArr; hwp_time_set
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_mdelay
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_port_read
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_core_task
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_int_port
</UL>

<P><STRONG><a name="[103]"></a>usb_portvbus_switch</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, drv_usb_host.o(i.usb_portvbus_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usb_portvbus_switch &rArr; usb_mdelay &rArr; hwp_delay &rArr; hwp_time_set
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_vbus_drive
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_mdelay
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_port_read
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_isr
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_host_init
</UL>

<P><STRONG><a name="[e9]"></a>usb_rcu_config</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, gd32f10x_usb_hw.o(i.usb_rcu_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = usb_rcu_config &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_usb_clock_config
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[102]"></a>usb_rxfifo_flush</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, drv_usb_core.o(i.usb_rxfifo_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usb_rxfifo_flush &rArr; usb_udelay &rArr; hwp_delay &rArr; hwp_time_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_host_init
</UL>

<P><STRONG><a name="[13a]"></a>usb_rxfifo_read</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, drv_usb_core.o(i.usb_rxfifo_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usb_rxfifo_read
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_int_rxfifonoempty
</UL>

<P><STRONG><a name="[ea]"></a>usb_timer_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gd32f10x_usb_hw.o(i.usb_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usb_timer_init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>usb_timer_irq</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gd32f10x_usb_hw.o(i.usb_timer_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_timer_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>

<P><STRONG><a name="[101]"></a>usb_txfifo_flush</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, drv_usb_core.o(i.usb_txfifo_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usb_txfifo_flush &rArr; usb_udelay &rArr; hwp_delay &rArr; hwp_time_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_host_init
</UL>

<P><STRONG><a name="[105]"></a>usb_txfifo_write</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, drv_usb_core.o(i.usb_txfifo_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usb_txfifo_write
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_int_txfifoempty
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pipe_xfer
</UL>

<P><STRONG><a name="[ff]"></a>usb_udelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gd32f10x_usb_hw.o(i.usb_udelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usb_udelay &rArr; hwp_delay &rArr; hwp_time_set
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwp_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_txfifo_flush
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rxfifo_flush
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_core_reset
</UL>

<P><STRONG><a name="[eb]"></a>usb_vbus_config</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gd32f10x_usb_hw.o(i.usb_vbus_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usb_vbus_config &rArr; usb_mdelay &rArr; hwp_delay &rArr; hwp_time_set
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[108]"></a>usb_vbus_drive</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32f10x_usb_hw.o(i.usb_vbus_drive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usb_vbus_drive
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_portvbus_switch
</UL>

<P><STRONG><a name="[10f]"></a>usbh_cfgdesc_get</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, usbh_enum.o(i.usbh_cfgdesc_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = usbh_cfgdesc_get &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_ctl_handler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_ctlstate_config
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_cfgset_parse
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_cfgdesc_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_enum_task
</UL>

<P><STRONG><a name="[ec]"></a>usbh_class_register</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbh_core.o(i.usbh_class_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbh_class_register
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[117]"></a>usbh_clrfeature</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, usbh_enum.o(i.usbh_clrfeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_ctl_handler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_ctlstate_config
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_req
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_bot_abort
</UL>

<P><STRONG><a name="[ef]"></a>usbh_core_task</STRONG> (Thumb, 526 bytes, Stack size 16 bytes, usbh_core.o(i.usbh_core_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = usbh_core_task &rArr; usbh_enum_task &rArr; usbh_strdesc_get &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_mdelay
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_setdevfeature
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_pipe_delete
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_pipe_create
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_pipe_allocate
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_error_handler
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_deinit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_enum_task
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_port_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[111]"></a>usbh_ctl_handler</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, usbh_transc.o(i.usbh_ctl_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_status_out_transc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_status_in_transc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_setup_transc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_data_out_transc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_data_in_transc
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_maxlun_get
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_bot_reset
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_clrfeature
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_strdesc_get
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_setdevfeature
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_setcfg
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_setaddress
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_devdesc_get
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_cfgdesc_get
</UL>

<P><STRONG><a name="[124]"></a>usbh_ctlsetup_send</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, usbh_transc.o(i.usbh_ctlsetup_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = usbh_ctlsetup_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_request_submit
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_setup_transc
</UL>

<P><STRONG><a name="[110]"></a>usbh_ctlstate_config</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbh_enum.o(i.usbh_ctlstate_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbh_ctlstate_config
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_maxlun_get
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_bot_reset
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_clrfeature
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_strdesc_get
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_setdevfeature
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_setcfg
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_setaddress
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_devdesc_get
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_cfgdesc_get
</UL>

<P><STRONG><a name="[126]"></a>usbh_data_recev</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, usbh_transc.o(i.usbh_data_recev))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = usbh_data_recev &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_request_submit
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_bot_process
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_status_in_transc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_data_in_transc
</UL>

<P><STRONG><a name="[129]"></a>usbh_data_send</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, usbh_transc.o(i.usbh_data_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_request_submit
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_bot_process
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_status_out_transc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_data_out_transc
</UL>

<P><STRONG><a name="[11d]"></a>usbh_deinit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usbh_core.o(i.usbh_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbh_deinit &rArr; usbh_pipe_free
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_pipe_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_core_task
</UL>

<P><STRONG><a name="[12b]"></a>usbh_devdesc_get</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, usbh_enum.o(i.usbh_devdesc_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = usbh_devdesc_get &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_ctl_handler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_ctlstate_config
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_devdesc_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_enum_task
</UL>

<P><STRONG><a name="[11c]"></a>usbh_error_handler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, usbh_core.o(i.usbh_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbh_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_core_task
</UL>

<P><STRONG><a name="[ed]"></a>usbh_init</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, usbh_core.o(i.usbh_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = usbh_init &rArr; usb_basic_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_deinit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_host_init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_curmode_set
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_core_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_basic_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[146]"></a>usbh_interface_find</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, usbh_enum.o(i.usbh_interface_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usbh_interface_find
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_itf_init
</UL>

<P><STRONG><a name="[147]"></a>usbh_interface_select</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbh_enum.o(i.usbh_interface_select))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_itf_init
</UL>

<P><STRONG><a name="[78]"></a>usbh_isr</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, drv_usbh_int.o(i.usbh_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = usbh_isr &rArr; usbh_int_port &rArr; usb_port_reset &rArr; usb_mdelay &rArr; hwp_delay &rArr; hwp_time_set
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_int_txfifoempty
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_int_rxfifonoempty
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_int_port
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_int_pipe
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_portvbus_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBFS_IRQHandler
</UL>

<P><STRONG><a name="[13c]"></a>usbh_msc_bot_abort</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, usbh_msc_bbb.o(i.usbh_msc_bot_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_clrfeature
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_bot_process
</UL>

<P><STRONG><a name="[148]"></a>usbh_msc_bot_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbh_msc_bbb.o(i.usbh_msc_bot_init))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_itf_init
</UL>

<P><STRONG><a name="[13d]"></a>usbh_msc_bot_process</STRONG> (Thumb, 670 bytes, Stack size 40 bytes, usbh_msc_bbb.o(i.usbh_msc_bot_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_csw_decode
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_bot_reset
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_bot_abort
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_urbstate_get
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_pipe_toggle_set
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_data_send
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_data_recev
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_write10
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_test_unitready
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_scsi_inquiry
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_request_sense
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_read_capacity10
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_read10
</UL>

<P><STRONG><a name="[141]"></a>usbh_msc_bot_reset</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, usbh_msc_bbb.o(i.usbh_msc_bot_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = usbh_msc_bot_reset &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_ctl_handler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_ctlstate_config
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_bot_process
</UL>

<P><STRONG><a name="[13f]"></a>usbh_msc_csw_decode</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, usbh_msc_bbb.o(i.usbh_msc_csw_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usbh_msc_csw_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_bot_process
</UL>

<P><STRONG><a name="[ba]"></a>usbh_msc_lun_info_get</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, usbh_msc_core.o(i.usbh_msc_lun_info_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbh_msc_lun_info_get
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_usr_msc_application
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[bc]"></a>usbh_msc_read</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, usbh_msc_core.o(i.usbh_msc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = usbh_msc_read &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_read10
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_rdwr_process
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[14c]"></a>usbh_msc_read10</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, usbh_msc_scsi.o(i.usbh_msc_read10))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = usbh_msc_read10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_bot_process
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_read
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_rdwr_process
</UL>

<P><STRONG><a name="[144]"></a>usbh_msc_read_capacity10</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, usbh_msc_scsi.o(i.usbh_msc_read_capacity10))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = usbh_msc_read_capacity10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_bot_process
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_handle
</UL>

<P><STRONG><a name="[145]"></a>usbh_msc_request_sense</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, usbh_msc_scsi.o(i.usbh_msc_request_sense))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = usbh_msc_request_sense &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_bot_process
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_rdwr_process
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_handle
</UL>

<P><STRONG><a name="[142]"></a>usbh_msc_scsi_inquiry</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, usbh_msc_scsi.o(i.usbh_msc_scsi_inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = usbh_msc_scsi_inquiry &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_bot_process
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_handle
</UL>

<P><STRONG><a name="[143]"></a>usbh_msc_test_unitready</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, usbh_msc_scsi.o(i.usbh_msc_test_unitready))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = usbh_msc_test_unitready &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_bot_process
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_handle
</UL>

<P><STRONG><a name="[bd]"></a>usbh_msc_write</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, usbh_msc_core.o(i.usbh_msc_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = usbh_msc_write &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_write10
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_rdwr_process
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[14d]"></a>usbh_msc_write10</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, usbh_msc_scsi.o(i.usbh_msc_write10))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_bot_process
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_write
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_rdwr_process
</UL>

<P><STRONG><a name="[114]"></a>usbh_nextdesc_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbh_enum.o(i.usbh_nextdesc_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbh_nextdesc_get
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_cfgset_parse
</UL>

<P><STRONG><a name="[118]"></a>usbh_pipe_allocate</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, usbh_pipe.o(i.usbh_pipe_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbh_pipe_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_freepipe_get
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_core_task
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_itf_init
</UL>

<P><STRONG><a name="[119]"></a>usbh_pipe_create</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, usbh_pipe.o(i.usbh_pipe_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = usbh_pipe_create &rArr; usb_pipe_init
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pipe_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_core_task
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_itf_init
</UL>

<P><STRONG><a name="[11e]"></a>usbh_pipe_delete</STRONG> (Thumb, 162 bytes, Stack size 64 bytes, usbh_pipe.o(i.usbh_pipe_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = usbh_pipe_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_core_task
</UL>

<P><STRONG><a name="[12a]"></a>usbh_pipe_free</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbh_pipe.o(i.usbh_pipe_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbh_pipe_free
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_itf_deinit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_deinit
</UL>

<P><STRONG><a name="[12e]"></a>usbh_pipe_update</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, usbh_pipe.o(i.usbh_pipe_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = usbh_pipe_update &rArr; usb_pipe_init
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pipe_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_enum_task
</UL>

<P><STRONG><a name="[12f]"></a>usbh_setaddress</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, usbh_enum.o(i.usbh_setaddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = usbh_setaddress &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_ctl_handler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_ctlstate_config
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_enum_task
</UL>

<P><STRONG><a name="[131]"></a>usbh_setcfg</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, usbh_enum.o(i.usbh_setcfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = usbh_setcfg &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_ctl_handler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_ctlstate_config
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_enum_task
</UL>

<P><STRONG><a name="[11b]"></a>usbh_setdevfeature</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, usbh_enum.o(i.usbh_setdevfeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = usbh_setdevfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_ctl_handler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_ctlstate_config
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_core_task
</UL>

<P><STRONG><a name="[130]"></a>usbh_strdesc_get</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, usbh_enum.o(i.usbh_strdesc_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = usbh_strdesc_get &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_ctl_handler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_ctlstate_config
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_strdesc_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_enum_task
</UL>

<P><STRONG><a name="[59]"></a>usbh_user_configuration_descavailable</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, usbh_usr.o(i.usbh_user_configuration_descavailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = usbh_user_configuration_descavailable &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[51]"></a>usbh_user_deinit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_usr.o(i.usbh_user_deinit))
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[58]"></a>usbh_user_device_address_assigned</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_usr.o(i.usbh_user_device_address_assigned))
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[52]"></a>usbh_user_device_connected</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_usr.o(i.usbh_user_device_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbh_user_device_connected &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[57]"></a>usbh_user_device_desc_available</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, usbh_usr.o(i.usbh_user_device_desc_available))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usbh_user_device_desc_available &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[54]"></a>usbh_user_device_disconnected</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_usr.o(i.usbh_user_device_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbh_user_device_disconnected &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[60]"></a>usbh_user_device_not_supported</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_usr.o(i.usbh_user_device_not_supported))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbh_user_device_not_supported &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[53]"></a>usbh_user_device_reset</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_usr.o(i.usbh_user_device_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbh_user_device_reset &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[56]"></a>usbh_user_device_speed_detected</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbh_usr.o(i.usbh_user_device_speed_detected))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbh_user_device_speed_detected &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>usbh_user_enumeration_finish</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_usr.o(i.usbh_user_enumeration_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbh_user_enumeration_finish &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[50]"></a>usbh_user_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbh_usr.o(i.usbh_user_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbh_user_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[5a]"></a>usbh_user_manufacturer_string</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbh_usr.o(i.usbh_user_manufacturer_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbh_user_manufacturer_string &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[55]"></a>usbh_user_over_current_detected</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_usr.o(i.usbh_user_over_current_detected))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbh_user_over_current_detected &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[5b]"></a>usbh_user_product_string</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbh_usr.o(i.usbh_user_product_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbh_user_product_string &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[5c]"></a>usbh_user_serialnum_string</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbh_usr.o(i.usbh_user_serialnum_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbh_user_serialnum_string &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[61]"></a>usbh_user_unrecovered_error</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_usr.o(i.usbh_user_unrecovered_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = usbh_user_unrecovered_error &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>usbh_user_userinput</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_usr.o(i.usbh_user_userinput))
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL>
<P><STRONG><a name="[5f]"></a>usbh_usr_msc_application</STRONG> (Thumb, 480 bytes, Stack size 80 bytes, usbh_usr.o(i.usbh_usr_msc_application))
<BR><BR>[Stack]<UL><LI>Max Depth = 1012<LI>Call Chain = usbh_usr_msc_application &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; usbh_msc_write &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_lun_info_get
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_read_id
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_read
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_state_get
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ON
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toggle_leds
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_mdelay
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_usr.o(.data)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[dc]"></a>hwp_delay</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gd32f10x_usb_hw.o(i.hwp_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hwp_delay &rArr; hwp_time_set
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwp_time_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_udelay
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_mdelay
</UL>

<P><STRONG><a name="[dd]"></a>hwp_time_set</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, gd32f10x_usb_hw.o(i.hwp_time_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hwp_time_set
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_disable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwp_delay
</UL>

<P><STRONG><a name="[f5]"></a>toggle_leds</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usbh_usr.o(i.toggle_leds))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = toggle_leds &rArr; led_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_usr_msc_application
</UL>

<P><STRONG><a name="[be]"></a>exmc_nand_getstatus</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, exmc_nandflash.o(i.exmc_nand_getstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = exmc_nand_getstatus
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_nand_readstatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_nand_readpage
</UL>

<P><STRONG><a name="[c0]"></a>exmc_nand_readdata</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, exmc_nandflash.o(i.exmc_nand_readdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = exmc_nand_readdata &rArr; exmc_nand_readpage &rArr; exmc_nand_getstatus
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_nand_readpage
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nand_read
</UL>

<P><STRONG><a name="[c1]"></a>exmc_nand_readpage</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, exmc_nandflash.o(i.exmc_nand_readpage))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = exmc_nand_readpage &rArr; exmc_nand_getstatus
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_nand_getstatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_nand_readdata
</UL>

<P><STRONG><a name="[bf]"></a>exmc_nand_readstatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, exmc_nandflash.o(i.exmc_nand_readstatus))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_nand_getstatus
</UL>

<P><STRONG><a name="[f2]"></a>system_clock_96m_hxtal</STRONG> (Thumb, 212 bytes, Stack size 0 bytes, system_gd32f10x.o(i.system_clock_96m_hxtal))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[76]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32f10x.o(i.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_96m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[fd]"></a>usb_core_reset</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, drv_usb_core.o(i.usb_core_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usb_core_reset &rArr; usb_udelay &rArr; hwp_delay &rArr; hwp_time_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_core_init
</UL>

<P><STRONG><a name="[107]"></a>usb_port_read</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_usb_host.o(i.usb_port_read))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_portvbus_switch
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_port_reset
</UL>

<P><STRONG><a name="[138]"></a>usb_phyclock_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, drv_usbh_int.o(i.usb_phyclock_config))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_int_port
</UL>

<P><STRONG><a name="[109]"></a>usb_pp_halt</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, drv_usbh_int.o(i.usb_pp_halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = usb_pp_halt &rArr; usb_pipe_halt
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pipe_halt
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_int_pipe_out
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_int_pipe_in
</UL>

<P><STRONG><a name="[133]"></a>usbh_int_pipe</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, drv_usbh_int.o(i.usbh_int_pipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = usbh_int_pipe &rArr; usbh_int_pipe_in &rArr; usb_pp_halt &rArr; usb_pipe_halt
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_int_pipe_out
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_int_pipe_in
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_isr
</UL>

<P><STRONG><a name="[134]"></a>usbh_int_pipe_in</STRONG> (Thumb, 496 bytes, Stack size 32 bytes, drv_usbh_int.o(i.usbh_int_pipe_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = usbh_int_pipe_in &rArr; usb_pp_halt &rArr; usb_pipe_halt
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pp_halt
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pipe_halt
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_int_pipe
</UL>

<P><STRONG><a name="[135]"></a>usbh_int_pipe_out</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, drv_usbh_int.o(i.usbh_int_pipe_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = usbh_int_pipe_out &rArr; usb_pp_halt &rArr; usb_pipe_halt
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pp_halt
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pipe_ping
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_int_pipe
</UL>

<P><STRONG><a name="[137]"></a>usbh_int_port</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, drv_usbh_int.o(i.usbh_int_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = usbh_int_port &rArr; usb_port_reset &rArr; usb_mdelay &rArr; hwp_delay &rArr; hwp_time_set
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_phyclock_config
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_port_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_isr
</UL>

<P><STRONG><a name="[139]"></a>usbh_int_rxfifonoempty</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, drv_usbh_int.o(i.usbh_int_rxfifonoempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usbh_int_rxfifonoempty &rArr; usb_rxfifo_read
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_rxfifo_read
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_isr
</UL>

<P><STRONG><a name="[13b]"></a>usbh_int_txfifoempty</STRONG> (Thumb, 378 bytes, Stack size 32 bytes, drv_usbh_int.o(i.usbh_int_txfifoempty))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = usbh_int_txfifoempty &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_txfifo_write
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_isr
</UL>

<P><STRONG><a name="[62]"></a>usbh_connect</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbh_core.o(i.usbh_connect))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[63]"></a>usbh_disconnect</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbh_core.o(i.usbh_disconnect))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[11a]"></a>usbh_enum_task</STRONG> (Thumb, 422 bytes, Stack size 80 bytes, usbh_core.o(i.usbh_enum_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = usbh_enum_task &rArr; usbh_strdesc_get &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_mdelay
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_strdesc_get
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_setcfg
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_setaddress
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_pipe_update
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_devdesc_get
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_cfgdesc_get
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_core_task
</UL>

<P><STRONG><a name="[65]"></a>usbh_port_disabled</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbh_core.o(i.usbh_port_disabled))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>usbh_port_enabled</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbh_core.o(i.usbh_port_enabled))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[66]"></a>usbh_sof</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usbh_core.o(i.usbh_sof))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbh_sof
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[112]"></a>usbh_cfgdesc_parse</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usbh_enum.o(i.usbh_cfgdesc_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbh_cfgdesc_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_cfgset_parse
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_cfgdesc_get
</UL>

<P><STRONG><a name="[113]"></a>usbh_cfgset_parse</STRONG> (Thumb, 244 bytes, Stack size 64 bytes, usbh_enum.o(i.usbh_cfgset_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = usbh_cfgset_parse &rArr; usbh_itfdesc_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_nextdesc_get
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_itfdesc_parse
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_epdesc_parse
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_cfgdesc_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_cfgdesc_get
</UL>

<P><STRONG><a name="[12c]"></a>usbh_devdesc_parse</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, usbh_enum.o(i.usbh_devdesc_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usbh_devdesc_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_devdesc_get
</UL>

<P><STRONG><a name="[116]"></a>usbh_epdesc_parse</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, usbh_enum.o(i.usbh_epdesc_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usbh_epdesc_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_cfgset_parse
</UL>

<P><STRONG><a name="[115]"></a>usbh_itfdesc_parse</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbh_enum.o(i.usbh_itfdesc_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbh_itfdesc_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_cfgset_parse
</UL>

<P><STRONG><a name="[150]"></a>usbh_strdesc_parse</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, usbh_enum.o(i.usbh_strdesc_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usbh_strdesc_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_strdesc_get
</UL>

<P><STRONG><a name="[14e]"></a>usbh_freepipe_get</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usbh_pipe.o(i.usbh_freepipe_get))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_pipe_allocate
</UL>

<P><STRONG><a name="[128]"></a>usb_curframe_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbh_transc.o(i.usb_curframe_get))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_urb_wait
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_setup_transc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_data_out_transc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_data_in_transc
</UL>

<P><STRONG><a name="[120]"></a>usbh_data_in_transc</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbh_transc.o(i.usbh_data_in_transc))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = usbh_data_in_transc &rArr; usbh_data_recev &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_data_recev
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_urb_wait
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_curframe_get
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_ctl_handler
</UL>

<P><STRONG><a name="[121]"></a>usbh_data_out_transc</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, usbh_transc.o(i.usbh_data_out_transc))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = usbh_data_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_data_send
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_urb_wait
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_curframe_get
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_ctl_handler
</UL>

<P><STRONG><a name="[125]"></a>usbh_request_submit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbh_transc.o(i.usbh_request_submit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pipe_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_data_send
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_data_recev
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_ctlsetup_send
</UL>

<P><STRONG><a name="[11f]"></a>usbh_setup_transc</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, usbh_transc.o(i.usbh_setup_transc))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = usbh_setup_transc &rArr; usbh_ctlsetup_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_ctlsetup_send
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_urb_wait
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_curframe_get
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_ctl_handler
</UL>

<P><STRONG><a name="[122]"></a>usbh_status_in_transc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbh_transc.o(i.usbh_status_in_transc))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = usbh_status_in_transc &rArr; usbh_data_recev &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_data_recev
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_urb_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_ctl_handler
</UL>

<P><STRONG><a name="[123]"></a>usbh_status_out_transc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbh_transc.o(i.usbh_status_out_transc))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_data_send
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_urb_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_ctl_handler
</UL>

<P><STRONG><a name="[127]"></a>usbh_urb_wait</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, usbh_transc.o(i.usbh_urb_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbh_urb_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_curframe_get
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_status_out_transc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_status_in_transc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_setup_transc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_data_out_transc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_data_in_transc
</UL>

<P><STRONG><a name="[140]"></a>usbh_pipe_toggle_set</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, usbh_msc_bbb.o(i.usbh_pipe_toggle_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbh_pipe_toggle_set
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_bot_process
</UL>

<P><STRONG><a name="[13e]"></a>usbh_urbstate_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbh_msc_bbb.o(i.usbh_urbstate_get))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_bot_process
</UL>

<P><STRONG><a name="[6a]"></a>usbh_msc_handle</STRONG> (Thumb, 942 bytes, Stack size 24 bytes, usbh_msc_core.o(i.usbh_msc_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = usbh_msc_handle &rArr; usbh_msc_test_unitready &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_test_unitready
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_scsi_inquiry
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_request_sense
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_read_capacity10
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_core.o(.data)
</UL>
<P><STRONG><a name="[68]"></a>usbh_msc_itf_deinit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usbh_msc_core.o(i.usbh_msc_itf_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usbh_msc_itf_deinit &rArr; usb_pipe_halt
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_pipe_free
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_pipe_halt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_core.o(.data)
</UL>
<P><STRONG><a name="[67]"></a>usbh_msc_itf_init</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, usbh_msc_core.o(i.usbh_msc_itf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = usbh_msc_itf_init &rArr; usbh_pipe_create &rArr; usb_pipe_init
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_pipe_toggle_set
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_bot_init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_interface_select
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_interface_find
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_pipe_create
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_pipe_allocate
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_core.o(.data)
</UL>
<P><STRONG><a name="[14a]"></a>usbh_msc_maxlun_get</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, usbh_msc_core.o(i.usbh_msc_maxlun_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = usbh_msc_maxlun_get &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_ctl_handler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_ctlstate_config
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_req
</UL>

<P><STRONG><a name="[14b]"></a>usbh_msc_rdwr_process</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, usbh_msc_core.o(i.usbh_msc_rdwr_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_write10
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_request_sense
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_read10
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_write
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_read
</UL>

<P><STRONG><a name="[69]"></a>usbh_msc_req</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, usbh_msc_core.o(i.usbh_msc_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = usbh_msc_req &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_maxlun_get
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_clrfeature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc_core.o(.data)
</UL>
<P><STRONG><a name="[149]"></a>usbh_pipe_toggle_set</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, usbh_msc_core.o(i.usbh_pipe_toggle_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usbh_pipe_toggle_set
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbh_msc_itf_init
</UL>

<P><STRONG><a name="[86]"></a>change_bitmap</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ff.o(i.change_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = change_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; usbh_msc_write &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[88]"></a>check_fs</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; usbh_msc_write &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[9f]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[aa]"></a>clst2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clst2sect))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[8b]"></a>cmp_lfn</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cmp_lfn &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[98]"></a>create_chain</STRONG> (Thumb, 460 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; usbh_msc_write &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_bitmap
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_last_frag
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[9d]"></a>create_name</STRONG> (Thumb, 576 bytes, Stack size 64 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = create_name &rArr; tchar2uni &rArr; ff_oem2uni
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_uni2oem
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[a2]"></a>create_xdir</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, ff.o(i.create_xdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = create_xdir &rArr; xname_sum &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xname_sum
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[db]"></a>dbc_1st</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ff.o(i.dbc_1st))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
</UL>

<P><STRONG><a name="[f3]"></a>dbc_2nd</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, ff.o(i.dbc_2nd))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tchar2uni
</UL>

<P><STRONG><a name="[a5]"></a>dir_alloc</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; usbh_msc_write &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[a8]"></a>dir_clear</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ff.o(i.dir_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = dir_clear &rArr; sync_window &rArr; disk_write &rArr; usbh_msc_write &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[ac]"></a>dir_find</STRONG> (Thumb, 424 bytes, Stack size 56 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; usbh_msc_write &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xname_sum
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[a7]"></a>dir_next</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; usbh_msc_write &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[ad]"></a>dir_read</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; usbh_msc_write &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[b1]"></a>dir_register</STRONG> (Thumb, 548 bytes, Stack size 136 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 788<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; usbh_msc_write &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_qword
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_obj_xdir
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_last_frag
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_first_frag
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_xdir
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[a6]"></a>dir_sdi</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; usbh_msc_write &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_obj_xdir
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[b2]"></a>fill_first_frag</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ff.o(i.fill_first_frag))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = fill_first_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; usbh_msc_write &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[9b]"></a>fill_last_frag</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ff.o(i.fill_last_frag))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; usbh_msc_write &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[9a]"></a>find_bitmap</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, ff.o(i.find_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = find_bitmap &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; usbh_msc_write &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[ca]"></a>find_volume</STRONG> (Thumb, 1222 bytes, Stack size 112 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; usbh_msc_write &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_qword
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[cc]"></a>follow_path</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; usbh_msc_write &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_alloc_info
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[b7]"></a>gen_numname</STRONG> (Thumb, 198 bytes, Stack size 64 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = gen_numname &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[99]"></a>get_fat</STRONG> (Thumb, 400 bytes, Stack size 48 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; usbh_msc_write &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[c9]"></a>get_ldnumber</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[cd]"></a>init_alloc_info</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(i.init_alloc_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = init_alloc_info &rArr; ld_qword
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_qword
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[d1]"></a>ld_clust</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[d3]"></a>ld_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_alloc_info
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[d8]"></a>ld_qword</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ff.o(i.ld_qword))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_qword
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_alloc_info
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[89]"></a>ld_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[b3]"></a>load_obj_xdir</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ff.o(i.load_obj_xdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = load_obj_xdir &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; usbh_msc_write &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[af]"></a>load_xdir</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, ff.o(i.load_xdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; usbh_msc_write &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdir_sum
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_obj_xdir
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[8a]"></a>mem_cmp</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[b6]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[a0]"></a>mem_set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_xdir
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[87]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; usbh_msc_write &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_bitmap
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_bitmap
</UL>

<P><STRONG><a name="[b0]"></a>pick_lfn</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, ff.o(i.pick_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pick_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[9c]"></a>put_fat</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; usbh_msc_write &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_last_frag
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_first_frag
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[b8]"></a>put_lfn</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ff.o(i.put_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = put_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[d0]"></a>remove_chain</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = remove_chain &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; usbh_msc_write &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[d2]"></a>st_clust</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ff.o(i.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_clust
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[cf]"></a>st_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.st_dword))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>

<P><STRONG><a name="[b4]"></a>st_qword</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, ff.o(i.st_qword))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = st_qword
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[a3]"></a>st_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.st_word))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_lfn
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_xdir
</UL>

<P><STRONG><a name="[b5]"></a>store_xdir</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ff.o(i.store_xdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = store_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; usbh_msc_write &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdir_sum
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[ae]"></a>sum_sfn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(i.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[d4]"></a>sync_fs</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; usbh_msc_write &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_word
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_dword
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[a9]"></a>sync_window</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = sync_window &rArr; disk_write &rArr; usbh_msc_write &rArr; usbh_msc_rdwr_process &rArr; usbh_msc_write10 &rArr; usbh_msc_bot_process &rArr; usbh_msc_bot_abort &rArr; usbh_clrfeature &rArr; usbh_ctl_handler &rArr; usbh_status_out_transc &rArr; usbh_data_send &rArr; usbh_request_submit &rArr; usb_pipe_xfer &rArr; usb_txfifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[9e]"></a>tchar2uni</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ff.o(i.tchar2uni))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tchar2uni &rArr; ff_oem2uni
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_oem2uni
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_2nd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbc_1st
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[c7]"></a>validate</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[e8]"></a>xdir_sum</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, ff.o(i.xdir_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = xdir_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
</UL>

<P><STRONG><a name="[a4]"></a>xname_sum</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ff.o(i.xname_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xname_sum &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_xdir
</UL>

<P><STRONG><a name="[7a]"></a>_printf_core</STRONG> (Thumb, 984 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[7c]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7b]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
